# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T01:00:05+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class AllocatedConnection(BaseModel):
    ingressPort: Optional[int] = Field(
        None, description='Required. The ingress port of an allocated connection'
    )
    pscUri: Optional[str] = Field(
        None, description='Required. The PSC uri of an allocated connection'
    )


class HostType(Enum):
    HOST_TYPE_UNSPECIFIED = 'HOST_TYPE_UNSPECIFIED'
    GCP_REGIONAL_MIG = 'GCP_REGIONAL_MIG'


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    CREATED = 'CREATED'
    UPDATING = 'UPDATING'
    DELETING = 'DELETING'
    DOWN = 'DOWN'


class Type(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    TCP_PROXY = 'TCP_PROXY'


class AppGateway(BaseModel):
    allocatedConnections: Optional[List[AllocatedConnection]] = Field(
        None, description='Output only. A list of connections allocated for the Gateway'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Timestamp when the resource was created.'
    )
    displayName: Optional[str] = Field(
        None,
        description='Optional. An arbitrary user-provided name for the AppGateway. Cannot exceed 64 characters.',
    )
    hostType: Optional[HostType] = Field(
        None, description='Required. The type of hosting used by the AppGateway.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Resource labels to represent user provided metadata.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Unique resource name of the AppGateway. The name is ignored when creating an AppGateway.',
    )
    state: Optional[State] = Field(
        None, description='Output only. The current state of the AppGateway.'
    )
    type: Optional[Type] = Field(
        None,
        description='Required. The type of network connectivity used by the AppGateway.',
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. A unique identifier for the instance generated by the system.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Timestamp when the resource was last modified.'
    )
    uri: Optional[str] = Field(
        None, description='Output only. Server-defined URI for this resource.'
    )


class AppGatewayOperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class CloudSecurityZerotrustApplinkAppConnectorProtoConnectorDetails(BaseModel):
    pass


class CloudSecurityZerotrustApplinkAppConnectorProtoGateway(BaseModel):
    interface: Optional[str] = Field(
        None,
        description='interface specifies the network interface of the gateway to connect to.',
    )
    name: Optional[str] = Field(
        None,
        description='name is the name of an instance running a gateway. It is the unique ID for a gateway. All gateways under the same connection have the same prefix. It is derived from the gateway URL. For example, name=${instance} assuming a gateway URL. https://www.googleapis.com/compute/${version}/projects/${project}/zones/${zone}/instances/${instance}',
    )
    port: Optional[int] = Field(
        None,
        description='port specifies the port of the gateway for tunnel connections from the connectors.',
    )
    project: Optional[str] = Field(
        None,
        description='project is the tenant project the gateway belongs to. Different from the project in the connection, it is a BeyondCorpAPI internally created project to manage all the gateways. It is sharing the same network with the consumer project user owned. It is derived from the gateway URL. For example, project=${project} assuming a gateway URL. https://www.googleapis.com/compute/${version}/projects/${project}/zones/${zone}/instances/${instance}',
    )
    selfLink: Optional[str] = Field(
        None,
        description='self_link is the gateway URL in the form https://www.googleapis.com/compute/${version}/projects/${project}/zones/${zone}/instances/${instance}',
    )
    zone: Optional[str] = Field(
        None,
        description='zone represents the zone the instance belongs. It is derived from the gateway URL. For example, zone=${zone} assuming a gateway URL. https://www.googleapis.com/compute/${version}/projects/${project}/zones/${zone}/instances/${instance}',
    )


class CloudSecurityZerotrustApplinkLogagentProtoLogAgentDetails(BaseModel):
    pass


class Empty(BaseModel):
    pass


class GoogleCloudBeyondcorpAppconnectionsV1AppConnectionApplicationEndpoint(BaseModel):
    host: Optional[str] = Field(
        None,
        description='Required. Hostname or IP address of the remote application endpoint.',
    )
    port: Optional[int] = Field(
        None, description='Required. Port of the remote application endpoint.'
    )


class Type2(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    GCP_REGIONAL_MIG = 'GCP_REGIONAL_MIG'


class GoogleCloudBeyondcorpAppconnectionsV1AppConnectionGateway(BaseModel):
    appGateway: Optional[str] = Field(
        None,
        description='Required. AppGateway name in following format: `projects/{project_id}/locations/{location_id}/appgateways/{gateway_id}`',
    )
    ingressPort: Optional[int] = Field(
        None,
        description='Output only. Ingress port reserved on the gateways for this AppConnection, if not specified or zero, the default port is 19443.',
    )
    l7psc: Optional[str] = Field(
        None,
        description='Output only. L7 private service connection for this resource.',
    )
    type: Optional[Type2] = Field(
        None, description='Required. The type of hosting used by the gateway.'
    )
    uri: Optional[str] = Field(
        None, description='Output only. Server-defined URI for this resource.'
    )


class GoogleCloudBeyondcorpAppconnectionsV1AppConnectionOperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class GoogleCloudBeyondcorpAppconnectionsV1alphaAppConnectionOperationMetadata(
    BaseModel
):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class GoogleCloudBeyondcorpAppconnectorsV1AppConnectorOperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class GoogleCloudBeyondcorpAppconnectorsV1AppConnectorPrincipalInfoServiceAccount(
    BaseModel
):
    email: Optional[str] = Field(
        None, description='Email address of the service account.'
    )


class GoogleCloudBeyondcorpAppconnectorsV1ContainerHealthDetails(BaseModel):
    currentConfigVersion: Optional[str] = Field(
        None, description='The version of the current config.'
    )
    errorMsg: Optional[str] = Field(None, description='The latest error message.')
    expectedConfigVersion: Optional[str] = Field(
        None, description='The version of the expected config.'
    )
    extendedStatus: Optional[Dict[str, str]] = Field(
        None,
        description='The extended status. Such as ExitCode, StartedAt, FinishedAt, etc.',
    )


class GoogleCloudBeyondcorpAppconnectorsV1ImageConfig(BaseModel):
    stableImage: Optional[str] = Field(
        None,
        description='The stable image that the remote agent will fallback to if the target image fails. Format would be a gcr image path, e.g.: gcr.io/PROJECT-ID/my-image:tag1',
    )
    targetImage: Optional[str] = Field(
        None,
        description='The initial image the remote agent will attempt to run for the control plane. Format would be a gcr image path, e.g.: gcr.io/PROJECT-ID/my-image:tag1',
    )


class GoogleCloudBeyondcorpAppconnectorsV1NotificationConfigCloudPubSubNotificationConfig(
    BaseModel
):
    pubsubSubscription: Optional[str] = Field(
        None,
        description='The Pub/Sub subscription the AppConnector uses to receive notifications.',
    )


class GoogleCloudBeyondcorpAppconnectorsV1RemoteAgentDetails(BaseModel):
    pass


class Status(Enum):
    HEALTH_STATUS_UNSPECIFIED = 'HEALTH_STATUS_UNSPECIFIED'
    HEALTHY = 'HEALTHY'
    UNHEALTHY = 'UNHEALTHY'
    UNRESPONSIVE = 'UNRESPONSIVE'
    DEGRADED = 'DEGRADED'


class GoogleCloudBeyondcorpAppconnectorsV1ResourceInfo(BaseModel):
    id: Optional[str] = Field(None, description='Required. Unique Id for the resource.')
    resource: Optional[Dict[str, Any]] = Field(
        None,
        description='Specific details for the resource. This is for internal use only.',
    )
    status: Optional[Status] = Field(
        None,
        description='Overall health status. Overall status is derived based on the status of each sub level resources.',
    )
    sub: Optional[List[GoogleCloudBeyondcorpAppconnectorsV1ResourceInfo]] = Field(
        None, description='List of Info for the sub level resources.'
    )
    time: Optional[str] = Field(
        None,
        description='The timestamp to collect the info. It is suggested to be set by the topmost level resource only.',
    )


class GoogleCloudBeyondcorpAppconnectorsV1alphaAppConnectorOperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class GoogleCloudBeyondcorpAppconnectorsV1alphaContainerHealthDetails(BaseModel):
    currentConfigVersion: Optional[str] = Field(
        None, description='The version of the current config.'
    )
    errorMsg: Optional[str] = Field(None, description='The latest error message.')
    expectedConfigVersion: Optional[str] = Field(
        None, description='The version of the expected config.'
    )
    extendedStatus: Optional[Dict[str, str]] = Field(
        None,
        description='The extended status. Such as ExitCode, StartedAt, FinishedAt, etc.',
    )


class GoogleCloudBeyondcorpAppconnectorsV1alphaRemoteAgentDetails(BaseModel):
    pass


class GoogleCloudBeyondcorpAppgatewaysV1alphaAppGatewayOperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class GoogleCloudBeyondcorpClientconnectorservicesV1alphaClientConnectorServiceOperationMetadata(
    BaseModel
):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class GoogleCloudBeyondcorpClientgatewaysV1alphaClientGatewayOperationMetadata(
    BaseModel
):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class GoogleCloudBeyondcorpConnectionsV1alphaConnectionOperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class GoogleCloudBeyondcorpConnectorsV1alphaConnectorOperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class GoogleCloudBeyondcorpConnectorsV1alphaContainerHealthDetails(BaseModel):
    currentConfigVersion: Optional[str] = Field(
        None, description='The version of the current config.'
    )
    errorMsg: Optional[str] = Field(None, description='The latest error message.')
    expectedConfigVersion: Optional[str] = Field(
        None, description='The version of the expected config.'
    )
    extendedStatus: Optional[Dict[str, str]] = Field(
        None,
        description='The extended status. Such as ExitCode, StartedAt, FinishedAt, etc.',
    )


class GoogleCloudBeyondcorpConnectorsV1alphaRemoteAgentDetails(BaseModel):
    pass


class GoogleCloudLocationLocation(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class LogType(Enum):
    LOG_TYPE_UNSPECIFIED = 'LOG_TYPE_UNSPECIFIED'
    ADMIN_READ = 'ADMIN_READ'
    DATA_WRITE = 'DATA_WRITE'
    DATA_READ = 'DATA_READ'


class GoogleIamV1AuditLogConfig(BaseModel):
    exemptedMembers: Optional[List[str]] = Field(
        None,
        description='Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.',
    )
    logType: Optional[LogType] = Field(
        None, description='The log type that this config enables.'
    )


class GoogleIamV1TestIamPermissionsRequest(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).',
    )


class GoogleIamV1TestIamPermissionsResponse(BaseModel):
    permissions: Optional[List[str]] = Field(
        None,
        description='A subset of `TestPermissionsRequest.permissions` that the caller is allowed.',
    )


class GoogleLongrunningCancelOperationRequest(BaseModel):
    pass


class GoogleRpcStatus(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class GoogleTypeExpr(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.',
    )
    expression: Optional[str] = Field(
        None,
        description='Textual representation of an expression in Common Expression Language syntax.',
    )
    location: Optional[str] = Field(
        None,
        description='Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.',
    )
    title: Optional[str] = Field(
        None,
        description='Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.',
    )


class ListAppGatewaysResponse(BaseModel):
    appGateways: Optional[List[AppGateway]] = Field(
        None, description='A list of BeyondCorp AppGateways in the project.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='A list of locations that could not be reached.'
    )


class Tunnelv1ProtoTunnelerError(BaseModel):
    err: Optional[str] = Field(None, description='Original raw error')
    retryable: Optional[bool] = Field(
        None,
        description="retryable isn't used for now, but we may want to reuse it in the future.",
    )


class Tunnelv1ProtoTunnelerInfo(BaseModel):
    backoffRetryCount: Optional[int] = Field(
        None,
        description='backoff_retry_count stores the number of times the tunneler has been retried by tunManager for current backoff sequence. Gets reset to 0 if time difference between 2 consecutive retries exceeds backoffRetryResetTime.',
    )
    id: Optional[str] = Field(None, description='id is the unique id of a tunneler.')
    latestErr: Optional[Tunnelv1ProtoTunnelerError] = Field(
        None,
        description='latest_err stores the Error for the latest tunneler failure. Gets reset everytime the tunneler is retried by tunManager.',
    )
    latestRetryTime: Optional[str] = Field(
        None,
        description='latest_retry_time stores the time when the tunneler was last restarted.',
    )
    totalRetryCount: Optional[int] = Field(
        None,
        description='total_retry_count stores the total number of times the tunneler has been retried by tunManager.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class CloudSecurityZerotrustApplinkAppConnectorProtoConnectionConfig(BaseModel):
    applicationEndpoint: Optional[str] = Field(
        None,
        description='application_endpoint is the endpoint of the application the form of host:port. For example, "localhost:80".',
    )
    applicationName: Optional[str] = Field(
        None,
        description='application_name represents the given name of the application the connection is connecting with.',
    )
    gateway: Optional[List[CloudSecurityZerotrustApplinkAppConnectorProtoGateway]] = (
        Field(
            None,
            description='gateway lists all instances running a gateway in GCP. They all connect to a connector on the host.',
        )
    )
    name: Optional[str] = Field(
        None,
        description='name is the unique ID for each connection. TODO(b/190732451) returns connection name from user-specified name in config. Now, name = ${application_name}:${application_endpoint}',
    )
    project: Optional[str] = Field(
        None,
        description='project represents the consumer project the connection belongs to.',
    )
    tunnelsPerGateway: Optional[int] = Field(
        None,
        description='tunnels_per_gateway reflects the number of tunnels between a connector and a gateway.',
    )
    userPort: Optional[int] = Field(
        None,
        description='user_port specifies the reserved port on gateways for user connections.',
    )


class GoogleCloudBeyondcorpAppconnectionsV1AppConnection(BaseModel):
    applicationEndpoint: Optional[
        GoogleCloudBeyondcorpAppconnectionsV1AppConnectionApplicationEndpoint
    ] = Field(
        None,
        description='Required. Address of the remote application endpoint for the BeyondCorp AppConnection.',
    )
    connectors: Optional[List[str]] = Field(
        None,
        description='Optional. List of [google.cloud.beyondcorp.v1main.Connector.name] that are authorised to be associated with this AppConnection.',
    )
    createTime: Optional[str] = Field(
        None, description='Output only. Timestamp when the resource was created.'
    )
    displayName: Optional[str] = Field(
        None,
        description='Optional. An arbitrary user-provided name for the AppConnection. Cannot exceed 64 characters.',
    )
    gateway: Optional[GoogleCloudBeyondcorpAppconnectionsV1AppConnectionGateway] = (
        Field(None, description='Optional. Gateway used by the AppConnection.')
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Resource labels to represent user provided metadata.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Unique resource name of the AppConnection. The name is ignored when creating a AppConnection.',
    )
    state: Optional[State] = Field(
        None, description='Output only. The current state of the AppConnection.'
    )
    type: Optional[Type] = Field(
        None,
        description='Required. The type of network connectivity used by the AppConnection.',
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. A unique identifier for the instance generated by the system.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Timestamp when the resource was last modified.'
    )


class GoogleCloudBeyondcorpAppconnectionsV1ListAppConnectionsResponse(BaseModel):
    appConnections: Optional[
        List[GoogleCloudBeyondcorpAppconnectionsV1AppConnection]
    ] = Field(None, description='A list of BeyondCorp AppConnections in the project.')
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='A list of locations that could not be reached.'
    )


class GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponseAppConnectionDetails(
    BaseModel
):
    appConnection: Optional[GoogleCloudBeyondcorpAppconnectionsV1AppConnection] = Field(
        None, description='A BeyondCorp AppConnection in the project.'
    )
    recentMigVms: Optional[List[str]] = Field(
        None,
        description='If type=GCP_REGIONAL_MIG, contains most recent VM instances, like `https://www.googleapis.com/compute/v1/projects/{project_id}/zones/{zone_id}/instances/{instance_id}`.',
    )


class GoogleCloudBeyondcorpAppconnectorsV1AppConnectorPrincipalInfo(BaseModel):
    serviceAccount: Optional[
        GoogleCloudBeyondcorpAppconnectorsV1AppConnectorPrincipalInfoServiceAccount
    ] = Field(None, description='A GCP service account.')


class GoogleCloudBeyondcorpAppconnectorsV1NotificationConfig(BaseModel):
    pubsubNotification: Optional[
        GoogleCloudBeyondcorpAppconnectorsV1NotificationConfigCloudPubSubNotificationConfig
    ] = Field(None, description='Cloud Pub/Sub Configuration to receive notifications.')


class GoogleCloudBeyondcorpAppconnectorsV1ReportStatusRequest(BaseModel):
    requestId: Optional[str] = Field(
        None,
        description='Optional. An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes since the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).',
    )
    resourceInfo: Optional[GoogleCloudBeyondcorpAppconnectorsV1ResourceInfo] = Field(
        None, description='Required. Resource info of the connector.'
    )
    validateOnly: Optional[bool] = Field(
        None,
        description='Optional. If set, validates request by executing a dry-run which would not alter the resource in any way.',
    )


class GoogleCloudLocationListLocationsResponse(BaseModel):
    locations: Optional[List[GoogleCloudLocationLocation]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class GoogleIamV1AuditConfig(BaseModel):
    auditLogConfigs: Optional[List[GoogleIamV1AuditLogConfig]] = Field(
        None, description='The configuration for logging of each type of permission.'
    )
    service: Optional[str] = Field(
        None,
        description='Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.',
    )


class GoogleIamV1Binding(BaseModel):
    condition: Optional[GoogleTypeExpr] = Field(
        None,
        description='The condition that is associated with this binding. If the condition evaluates to `true`, then this binding applies to the current request. If the condition evaluates to `false`, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )
    members: Optional[List[str]] = Field(
        None,
        description='Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding.',
    )
    role: Optional[str] = Field(
        None,
        description='Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.',
    )


class GoogleIamV1Policy(BaseModel):
    auditConfigs: Optional[List[GoogleIamV1AuditConfig]] = Field(
        None, description='Specifies cloud audit logging configuration for this policy.'
    )
    bindings: Optional[List[GoogleIamV1Binding]] = Field(
        None,
        description='Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.',
    )
    etag: Optional[str] = Field(
        None,
        description='`etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.',
    )
    version: Optional[int] = Field(
        None,
        description='Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).',
    )


class GoogleIamV1SetIamPolicyRequest(BaseModel):
    policy: Optional[GoogleIamV1Policy] = Field(
        None,
        description='REQUIRED: The complete policy to be applied to the `resource`. The size of the policy is limited to a few 10s of KB. An empty policy is a valid policy but certain Google Cloud services (such as Projects) might reject them.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`',
    )


class GoogleLongrunningOperation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[GoogleRpcStatus] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponse(BaseModel):
    appConnectionDetails: Optional[
        List[
            GoogleCloudBeyondcorpAppconnectionsV1ResolveAppConnectionsResponseAppConnectionDetails
        ]
    ] = Field(
        None,
        description='A list of BeyondCorp AppConnections with details in the project.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='A list of locations that could not be reached.'
    )


class GoogleCloudBeyondcorpAppconnectorsV1AppConnector(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. Timestamp when the resource was created.'
    )
    displayName: Optional[str] = Field(
        None,
        description='Optional. An arbitrary user-provided name for the AppConnector. Cannot exceed 64 characters.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Optional. Resource labels to represent user provided metadata.',
    )
    name: Optional[str] = Field(
        None,
        description='Required. Unique resource name of the AppConnector. The name is ignored when creating a AppConnector.',
    )
    principalInfo: Optional[
        GoogleCloudBeyondcorpAppconnectorsV1AppConnectorPrincipalInfo
    ] = Field(
        None,
        description='Required. Principal information about the Identity of the AppConnector.',
    )
    resourceInfo: Optional[GoogleCloudBeyondcorpAppconnectorsV1ResourceInfo] = Field(
        None, description='Optional. Resource info of the connector.'
    )
    state: Optional[State] = Field(
        None, description='Output only. The current state of the AppConnector.'
    )
    uid: Optional[str] = Field(
        None,
        description='Output only. A unique identifier for the instance generated by the system.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. Timestamp when the resource was last modified.'
    )


class GoogleCloudBeyondcorpAppconnectorsV1AppConnectorInstanceConfig(BaseModel):
    imageConfig: Optional[GoogleCloudBeyondcorpAppconnectorsV1ImageConfig] = Field(
        None,
        description="ImageConfig defines the GCR images to run for the remote agent's control plane.",
    )
    instanceConfig: Optional[Dict[str, Any]] = Field(
        None, description='The SLM instance agent configuration.'
    )
    notificationConfig: Optional[
        GoogleCloudBeyondcorpAppconnectorsV1NotificationConfig
    ] = Field(
        None,
        description='NotificationConfig defines the notification mechanism that the remote instance should subscribe to in order to receive notification.',
    )
    sequenceNumber: Optional[str] = Field(
        None,
        description='Required. A monotonically increasing number generated and maintained by the API provider. Every time a config changes in the backend, the sequenceNumber should be bumped up to reflect the change.',
    )


class GoogleCloudBeyondcorpAppconnectorsV1ListAppConnectorsResponse(BaseModel):
    appConnectors: Optional[List[GoogleCloudBeyondcorpAppconnectorsV1AppConnector]] = (
        Field(None, description='A list of BeyondCorp AppConnectors in the project.')
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve the next page of results, or empty if there are no more results in the list.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='A list of locations that could not be reached.'
    )


class GoogleCloudBeyondcorpAppconnectorsV1ResolveInstanceConfigResponse(BaseModel):
    instanceConfig: Optional[
        GoogleCloudBeyondcorpAppconnectorsV1AppConnectorInstanceConfig
    ] = Field(None, description='AppConnectorInstanceConfig.')


class GoogleLongrunningListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[GoogleLongrunningOperation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


GoogleCloudBeyondcorpAppconnectorsV1ResourceInfo.model_rebuild()
